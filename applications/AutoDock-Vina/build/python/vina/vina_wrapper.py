# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
#################################################################
# If you used AutoDock Vina in your work, please cite:          #
#                                                               #
# O. Trott, A. J. Olson,                                        #
# AutoDock Vina: improving the speed and accuracy of docking    #
# with a new scoring function, efficient optimization and       #
# multithreading, Journal of Computational Chemistry 31 (2010)  #
# 455-461                                                       #
#                                                               #
# DOI 10.1002/jcc.21334                                         #
#                                                               #
# Please see http://vina.scripps.edu for more information.      #
#################################################################

"""


import sys
if sys.platform.find("linux") != -1:
    dlflags = sys.getdlopenflags()
    import ctypes
    sys.setdlopenflags(dlflags | ctypes.RTLD_GLOBAL)



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _vina_wrapper
else:
    import _vina_wrapper

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



if sys.platform.find("linux") != -1:
    sys.setdlopenflags(dlflags)

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vina_wrapper.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _vina_wrapper.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _vina_wrapper.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _vina_wrapper.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _vina_wrapper.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _vina_wrapper.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _vina_wrapper.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _vina_wrapper.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _vina_wrapper.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _vina_wrapper.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _vina_wrapper.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _vina_wrapper.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _vina_wrapper.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _vina_wrapper.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _vina_wrapper.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _vina_wrapper.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _vina_wrapper.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _vina_wrapper:
_vina_wrapper.SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _vina_wrapper.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _vina_wrapper.IntVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _vina_wrapper.IntVector___bool__(self)

    def __len__(self) -> "std::vector< int >::size_type":
        return _vina_wrapper.IntVector___len__(self)

    def __getslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "std::vector< int,std::allocator< int > > *":
        return _vina_wrapper.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _vina_wrapper.IntVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "void":
        return _vina_wrapper.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _vina_wrapper.IntVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        return _vina_wrapper.IntVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _vina_wrapper.IntVector___setitem__(self, *args)

    def pop(self) -> "std::vector< int >::value_type":
        return _vina_wrapper.IntVector_pop(self)

    def append(self, x: "std::vector< int >::value_type const &") -> "void":
        return _vina_wrapper.IntVector_append(self, x)

    def empty(self) -> "bool":
        return _vina_wrapper.IntVector_empty(self)

    def size(self) -> "std::vector< int >::size_type":
        return _vina_wrapper.IntVector_size(self)

    def swap(self, v: "IntVector") -> "void":
        return _vina_wrapper.IntVector_swap(self, v)

    def begin(self) -> "std::vector< int >::iterator":
        return _vina_wrapper.IntVector_begin(self)

    def end(self) -> "std::vector< int >::iterator":
        return _vina_wrapper.IntVector_end(self)

    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        return _vina_wrapper.IntVector_rbegin(self)

    def rend(self) -> "std::vector< int >::reverse_iterator":
        return _vina_wrapper.IntVector_rend(self)

    def clear(self) -> "void":
        return _vina_wrapper.IntVector_clear(self)

    def get_allocator(self) -> "std::vector< int >::allocator_type":
        return _vina_wrapper.IntVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _vina_wrapper.IntVector_pop_back(self)

    def erase(self, *args) -> "std::vector< int >::iterator":
        return _vina_wrapper.IntVector_erase(self, *args)

    def __init__(self, *args):
        _vina_wrapper.IntVector_swiginit(self, _vina_wrapper.new_IntVector(*args))

    def push_back(self, x: "std::vector< int >::value_type const &") -> "void":
        return _vina_wrapper.IntVector_push_back(self, x)

    def front(self) -> "std::vector< int >::value_type const &":
        return _vina_wrapper.IntVector_front(self)

    def back(self) -> "std::vector< int >::value_type const &":
        return _vina_wrapper.IntVector_back(self)

    def assign(self, n: "std::vector< int >::size_type", x: "std::vector< int >::value_type const &") -> "void":
        return _vina_wrapper.IntVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _vina_wrapper.IntVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _vina_wrapper.IntVector_insert(self, *args)

    def reserve(self, n: "std::vector< int >::size_type") -> "void":
        return _vina_wrapper.IntVector_reserve(self, n)

    def capacity(self) -> "std::vector< int >::size_type":
        return _vina_wrapper.IntVector_capacity(self)
    __swig_destroy__ = _vina_wrapper.delete_IntVector

# Register IntVector in _vina_wrapper:
_vina_wrapper.IntVector_swigregister(IntVector)

class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _vina_wrapper.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _vina_wrapper.DoubleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _vina_wrapper.DoubleVector___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        return _vina_wrapper.DoubleVector___len__(self)

    def __getslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "std::vector< double,std::allocator< double > > *":
        return _vina_wrapper.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _vina_wrapper.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "void":
        return _vina_wrapper.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _vina_wrapper.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        return _vina_wrapper.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _vina_wrapper.DoubleVector___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        return _vina_wrapper.DoubleVector_pop(self)

    def append(self, x: "std::vector< double >::value_type const &") -> "void":
        return _vina_wrapper.DoubleVector_append(self, x)

    def empty(self) -> "bool":
        return _vina_wrapper.DoubleVector_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        return _vina_wrapper.DoubleVector_size(self)

    def swap(self, v: "DoubleVector") -> "void":
        return _vina_wrapper.DoubleVector_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        return _vina_wrapper.DoubleVector_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        return _vina_wrapper.DoubleVector_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        return _vina_wrapper.DoubleVector_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        return _vina_wrapper.DoubleVector_rend(self)

    def clear(self) -> "void":
        return _vina_wrapper.DoubleVector_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        return _vina_wrapper.DoubleVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _vina_wrapper.DoubleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        return _vina_wrapper.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _vina_wrapper.DoubleVector_swiginit(self, _vina_wrapper.new_DoubleVector(*args))

    def push_back(self, x: "std::vector< double >::value_type const &") -> "void":
        return _vina_wrapper.DoubleVector_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        return _vina_wrapper.DoubleVector_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        return _vina_wrapper.DoubleVector_back(self)

    def assign(self, n: "std::vector< double >::size_type", x: "std::vector< double >::value_type const &") -> "void":
        return _vina_wrapper.DoubleVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _vina_wrapper.DoubleVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _vina_wrapper.DoubleVector_insert(self, *args)

    def reserve(self, n: "std::vector< double >::size_type") -> "void":
        return _vina_wrapper.DoubleVector_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        return _vina_wrapper.DoubleVector_capacity(self)
    __swig_destroy__ = _vina_wrapper.delete_DoubleVector

# Register DoubleVector in _vina_wrapper:
_vina_wrapper.DoubleVector_swigregister(DoubleVector)

class DoubleVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _vina_wrapper.DoubleVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _vina_wrapper.DoubleVectorVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _vina_wrapper.DoubleVectorVector___bool__(self)

    def __len__(self) -> "std::vector< std::vector< double > >::size_type":
        return _vina_wrapper.DoubleVectorVector___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< double > >::difference_type", j: "std::vector< std::vector< double > >::difference_type") -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *":
        return _vina_wrapper.DoubleVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _vina_wrapper.DoubleVectorVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< double > >::difference_type", j: "std::vector< std::vector< double > >::difference_type") -> "void":
        return _vina_wrapper.DoubleVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _vina_wrapper.DoubleVectorVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< double > >::value_type const &":
        return _vina_wrapper.DoubleVectorVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _vina_wrapper.DoubleVectorVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< double > >::value_type":
        return _vina_wrapper.DoubleVectorVector_pop(self)

    def append(self, x: "DoubleVector") -> "void":
        return _vina_wrapper.DoubleVectorVector_append(self, x)

    def empty(self) -> "bool":
        return _vina_wrapper.DoubleVectorVector_empty(self)

    def size(self) -> "std::vector< std::vector< double > >::size_type":
        return _vina_wrapper.DoubleVectorVector_size(self)

    def swap(self, v: "DoubleVectorVector") -> "void":
        return _vina_wrapper.DoubleVectorVector_swap(self, v)

    def begin(self) -> "std::vector< std::vector< double > >::iterator":
        return _vina_wrapper.DoubleVectorVector_begin(self)

    def end(self) -> "std::vector< std::vector< double > >::iterator":
        return _vina_wrapper.DoubleVectorVector_end(self)

    def rbegin(self) -> "std::vector< std::vector< double > >::reverse_iterator":
        return _vina_wrapper.DoubleVectorVector_rbegin(self)

    def rend(self) -> "std::vector< std::vector< double > >::reverse_iterator":
        return _vina_wrapper.DoubleVectorVector_rend(self)

    def clear(self) -> "void":
        return _vina_wrapper.DoubleVectorVector_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< double > >::allocator_type":
        return _vina_wrapper.DoubleVectorVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _vina_wrapper.DoubleVectorVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< double > >::iterator":
        return _vina_wrapper.DoubleVectorVector_erase(self, *args)

    def __init__(self, *args):
        _vina_wrapper.DoubleVectorVector_swiginit(self, _vina_wrapper.new_DoubleVectorVector(*args))

    def push_back(self, x: "DoubleVector") -> "void":
        return _vina_wrapper.DoubleVectorVector_push_back(self, x)

    def front(self) -> "std::vector< std::vector< double > >::value_type const &":
        return _vina_wrapper.DoubleVectorVector_front(self)

    def back(self) -> "std::vector< std::vector< double > >::value_type const &":
        return _vina_wrapper.DoubleVectorVector_back(self)

    def assign(self, n: "std::vector< std::vector< double > >::size_type", x: "DoubleVector") -> "void":
        return _vina_wrapper.DoubleVectorVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _vina_wrapper.DoubleVectorVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _vina_wrapper.DoubleVectorVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< double > >::size_type") -> "void":
        return _vina_wrapper.DoubleVectorVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< double > >::size_type":
        return _vina_wrapper.DoubleVectorVector_capacity(self)
    __swig_destroy__ = _vina_wrapper.delete_DoubleVectorVector

# Register DoubleVectorVector in _vina_wrapper:
_vina_wrapper.DoubleVectorVector_swigregister(DoubleVectorVector)

class StringVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _vina_wrapper.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _vina_wrapper.StringVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _vina_wrapper.StringVector___bool__(self)

    def __len__(self) -> "std::vector< std::string >::size_type":
        return _vina_wrapper.StringVector___len__(self)

    def __getslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "std::vector< std::string,std::allocator< std::string > > *":
        return _vina_wrapper.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _vina_wrapper.StringVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "void":
        return _vina_wrapper.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _vina_wrapper.StringVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        return _vina_wrapper.StringVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _vina_wrapper.StringVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::string >::value_type":
        return _vina_wrapper.StringVector_pop(self)

    def append(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _vina_wrapper.StringVector_append(self, x)

    def empty(self) -> "bool":
        return _vina_wrapper.StringVector_empty(self)

    def size(self) -> "std::vector< std::string >::size_type":
        return _vina_wrapper.StringVector_size(self)

    def swap(self, v: "StringVector") -> "void":
        return _vina_wrapper.StringVector_swap(self, v)

    def begin(self) -> "std::vector< std::string >::iterator":
        return _vina_wrapper.StringVector_begin(self)

    def end(self) -> "std::vector< std::string >::iterator":
        return _vina_wrapper.StringVector_end(self)

    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        return _vina_wrapper.StringVector_rbegin(self)

    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        return _vina_wrapper.StringVector_rend(self)

    def clear(self) -> "void":
        return _vina_wrapper.StringVector_clear(self)

    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        return _vina_wrapper.StringVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _vina_wrapper.StringVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::string >::iterator":
        return _vina_wrapper.StringVector_erase(self, *args)

    def __init__(self, *args):
        _vina_wrapper.StringVector_swiginit(self, _vina_wrapper.new_StringVector(*args))

    def push_back(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _vina_wrapper.StringVector_push_back(self, x)

    def front(self) -> "std::vector< std::string >::value_type const &":
        return _vina_wrapper.StringVector_front(self)

    def back(self) -> "std::vector< std::string >::value_type const &":
        return _vina_wrapper.StringVector_back(self)

    def assign(self, n: "std::vector< std::string >::size_type", x: "std::vector< std::string >::value_type const &") -> "void":
        return _vina_wrapper.StringVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _vina_wrapper.StringVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _vina_wrapper.StringVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::string >::size_type") -> "void":
        return _vina_wrapper.StringVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::string >::size_type":
        return _vina_wrapper.StringVector_capacity(self)
    __swig_destroy__ = _vina_wrapper.delete_StringVector

# Register StringVector in _vina_wrapper:
_vina_wrapper.StringVector_swigregister(StringVector)

class ConstCharVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _vina_wrapper.ConstCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _vina_wrapper.ConstCharVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _vina_wrapper.ConstCharVector___bool__(self)

    def __len__(self) -> "std::vector< char const * >::size_type":
        return _vina_wrapper.ConstCharVector___len__(self)

    def __getslice__(self, i: "std::vector< char const * >::difference_type", j: "std::vector< char const * >::difference_type") -> "std::vector< char const *,std::allocator< char const * > > *":
        return _vina_wrapper.ConstCharVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _vina_wrapper.ConstCharVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< char const * >::difference_type", j: "std::vector< char const * >::difference_type") -> "void":
        return _vina_wrapper.ConstCharVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _vina_wrapper.ConstCharVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< char const * >::value_type":
        return _vina_wrapper.ConstCharVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _vina_wrapper.ConstCharVector___setitem__(self, *args)

    def pop(self) -> "std::vector< char const * >::value_type":
        return _vina_wrapper.ConstCharVector_pop(self)

    def append(self, x: "std::vector< char const * >::value_type") -> "void":
        return _vina_wrapper.ConstCharVector_append(self, x)

    def empty(self) -> "bool":
        return _vina_wrapper.ConstCharVector_empty(self)

    def size(self) -> "std::vector< char const * >::size_type":
        return _vina_wrapper.ConstCharVector_size(self)

    def swap(self, v: "ConstCharVector") -> "void":
        return _vina_wrapper.ConstCharVector_swap(self, v)

    def begin(self) -> "std::vector< char const * >::iterator":
        return _vina_wrapper.ConstCharVector_begin(self)

    def end(self) -> "std::vector< char const * >::iterator":
        return _vina_wrapper.ConstCharVector_end(self)

    def rbegin(self) -> "std::vector< char const * >::reverse_iterator":
        return _vina_wrapper.ConstCharVector_rbegin(self)

    def rend(self) -> "std::vector< char const * >::reverse_iterator":
        return _vina_wrapper.ConstCharVector_rend(self)

    def clear(self) -> "void":
        return _vina_wrapper.ConstCharVector_clear(self)

    def get_allocator(self) -> "std::vector< char const * >::allocator_type":
        return _vina_wrapper.ConstCharVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _vina_wrapper.ConstCharVector_pop_back(self)

    def erase(self, *args) -> "std::vector< char const * >::iterator":
        return _vina_wrapper.ConstCharVector_erase(self, *args)

    def __init__(self, *args):
        _vina_wrapper.ConstCharVector_swiginit(self, _vina_wrapper.new_ConstCharVector(*args))

    def push_back(self, x: "std::vector< char const * >::value_type") -> "void":
        return _vina_wrapper.ConstCharVector_push_back(self, x)

    def front(self) -> "std::vector< char const * >::value_type":
        return _vina_wrapper.ConstCharVector_front(self)

    def back(self) -> "std::vector< char const * >::value_type":
        return _vina_wrapper.ConstCharVector_back(self)

    def assign(self, n: "std::vector< char const * >::size_type", x: "std::vector< char const * >::value_type") -> "void":
        return _vina_wrapper.ConstCharVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _vina_wrapper.ConstCharVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _vina_wrapper.ConstCharVector_insert(self, *args)

    def reserve(self, n: "std::vector< char const * >::size_type") -> "void":
        return _vina_wrapper.ConstCharVector_reserve(self, n)

    def capacity(self) -> "std::vector< char const * >::size_type":
        return _vina_wrapper.ConstCharVector_capacity(self)
    __swig_destroy__ = _vina_wrapper.delete_ConstCharVector

# Register ConstCharVector in _vina_wrapper:
_vina_wrapper.ConstCharVector_swigregister(ConstCharVector)

class Vina(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _vina_wrapper.Vina_swiginit(self, _vina_wrapper.new_Vina(*args))
    __swig_destroy__ = _vina_wrapper.delete_Vina

    def cite(self) -> "void":
        return _vina_wrapper.Vina_cite(self)

    def seed(self) -> "int":
        return _vina_wrapper.Vina_seed(self)

    def set_receptor(self, *args) -> "void":
        return _vina_wrapper.Vina_set_receptor(self, *args)

    def set_ligand_from_string(self, *args) -> "void":
        return _vina_wrapper.Vina_set_ligand_from_string(self, *args)

    def set_ligand_from_file(self, *args) -> "void":
        return _vina_wrapper.Vina_set_ligand_from_file(self, *args)

    def set_vina_weights(self, weight_gauss1: "double"=-0.035579, weight_gauss2: "double"=-0.005156, weight_repulsion: "double"=0.840245, weight_hydrophobic: "double"=-0.035069, weight_hydrogen: "double"=-0.587439, weight_glue: "double"=50, weight_rot: "double"=0.05846) -> "void":
        return _vina_wrapper.Vina_set_vina_weights(self, weight_gauss1, weight_gauss2, weight_repulsion, weight_hydrophobic, weight_hydrogen, weight_glue, weight_rot)

    def set_vinardo_weights(self, weight_gauss1: "double"=-0.045, weight_repulsion: "double"=0.8, weight_hydrophobic: "double"=-0.035, weight_hydrogen: "double"=-0.600, weight_glue: "double"=50, weight_rot: "double"=0.05846) -> "void":
        return _vina_wrapper.Vina_set_vinardo_weights(self, weight_gauss1, weight_repulsion, weight_hydrophobic, weight_hydrogen, weight_glue, weight_rot)

    def set_ad4_weights(self, weight_ad4_vdw: "double"=0.1662, weight_ad4_hb: "double"=0.1209, weight_ad4_elec: "double"=0.1406, weight_ad4_dsolv: "double"=0.1322, weight_glue: "double"=50, weight_ad4_rot: "double"=0.2983) -> "void":
        return _vina_wrapper.Vina_set_ad4_weights(self, weight_ad4_vdw, weight_ad4_hb, weight_ad4_elec, weight_ad4_dsolv, weight_glue, weight_ad4_rot)

    def compute_vina_maps(self, center_x: "double", center_y: "double", center_z: "double", size_x: "double", size_y: "double", size_z: "double", granularity: "double"=0.5, force_even_voxels: "bool"=False) -> "void":
        return _vina_wrapper.Vina_compute_vina_maps(self, center_x, center_y, center_z, size_x, size_y, size_z, granularity, force_even_voxels)

    def load_maps(self, maps: "std::string") -> "void":
        return _vina_wrapper.Vina_load_maps(self, maps)

    def randomize(self, max_steps: "int const"=10000) -> "void":
        return _vina_wrapper.Vina_randomize(self, max_steps)

    def score(self) -> "std::vector< double,std::allocator< double > >":
        return _vina_wrapper.Vina_score(self)

    def optimize(self, max_steps: "int const"=0) -> "std::vector< double,std::allocator< double > >":
        return _vina_wrapper.Vina_optimize(self, max_steps)

    def global_search(self, exhaustiveness: "int const"=8, n_poses: "int const"=20, min_rmsd: "double const"=1.0, max_evals: "int const"=0) -> "void":
        return _vina_wrapper.Vina_global_search(self, exhaustiveness, n_poses, min_rmsd, max_evals)

    def get_poses(self, how_many: "int"=9, energy_range: "double"=3.0) -> "std::string":
        return _vina_wrapper.Vina_get_poses(self, how_many, energy_range)

    def get_poses_coordinates(self, how_many: "int"=9, energy_range: "double"=3.0) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
        return _vina_wrapper.Vina_get_poses_coordinates(self, how_many, energy_range)

    def get_poses_energies(self, how_many: "int"=9, energy_range: "double"=3.0) -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >":
        return _vina_wrapper.Vina_get_poses_energies(self, how_many, energy_range)

    def write_pose(self, *args) -> "void":
        return _vina_wrapper.Vina_write_pose(self, *args)

    def write_poses(self, output_name: "std::string const &", how_many: "int"=9, energy_range: "double"=3.0) -> "void":
        return _vina_wrapper.Vina_write_poses(self, output_name, how_many, energy_range)

    def write_maps(self, *args) -> "void":
        return _vina_wrapper.Vina_write_maps(self, *args)

    def show_score(self, energies: "DoubleVector") -> "void":
        return _vina_wrapper.Vina_show_score(self, energies)

# Register Vina in _vina_wrapper:
_vina_wrapper.Vina_swigregister(Vina)



