diff --git a/examples/script_example_1.py b/examples/script_example_1.py
new file mode 100644
index 0000000..315eb70
--- /dev/null
+++ b/examples/script_example_1.py
@@ -0,0 +1,51 @@
+#!/usr/bin/env python
+# encoding: utf-8
+import os
+from subprocess import run
+from argparse import ArgumentParser
+
+def main(argv):
+    # Argument parsing
+    parser = ArgumentParser(description="Run protein folding scripts")
+    parser.add_argument('--input', help="Input data directory", default="ProteinMPNN/inputs/PDB_monomers/pdbs")
+    parser.add_argument('--output', help="Output directory", default="/outputs/example_1_outputs")
+    parser.add_argument('--num_seq_per_target', type=int, default=2, help="Number of sequences per target")
+    parser.add_argument('--sampling_temp', type=float, default=0.1, help="Sampling temperature")
+    parser.add_argument('--seed', type=int, default=37, help="Random seed")
+    parser.add_argument('--batch_size', type=int, default=1, help="Batch size")
+    parser.add_argument('--precision', choices=['float32', 'bfloat16'], default='float32', help="Precision type for calculations")
+    parser.add_argument('--use_ipex', action='store_true', help="Enable IPEX optimizations")
+    args = parser.parse_args()
+
+    # Check and create output directory if it doesn't exist
+    output_dir = args.output
+    if not os.path.exists(output_dir):
+        os.makedirs(output_dir)
+
+    folder_with_pdbs = args.input
+    path_for_parsed_chains = os.path.join(output_dir, "parsed_pdbs.jsonl")
+
+    # Run parsing script
+    a = run([
+        'python', 'helper_scripts/parse_multiple_chains.py',
+        '--input_path', folder_with_pdbs,
+        '--output_path', path_for_parsed_chains
+    ])
+    assert a.returncode == 0, "Error parsing multiple chains"
+
+    # Run protein folding script
+    a = run([
+        'python', 'protein_mpnn_run.py',
+        '--jsonl_path', path_for_parsed_chains,
+        '--out_folder', output_dir,
+        '--num_seq_per_target', str(args.num_seq_per_target),
+        '--sampling_temp', str(args.sampling_temp),
+        '--seed', str(args.seed),
+        '--batch_size', str(args.batch_size),
+        '--precision', args.precision
+    ] + (['--use_ipex'] if args.use_ipex else []))
+    assert a.returncode == 0, "Error running protein folding script"
+
+if __name__ == "__main__":
+    import sys
+    main(sys.argv)
diff --git a/examples/script_example_2.py b/examples/script_example_2.py
new file mode 100644
index 0000000..f6b117f
--- /dev/null
+++ b/examples/script_example_2.py
@@ -0,0 +1,64 @@
+#!/usr/bin/env python
+# encoding: utf-8
+import os
+from subprocess import run
+from argparse import ArgumentParser
+
+def main(argv):
+    # Argument parsing
+    parser = ArgumentParser(description="Run protein folding with assigned chains")
+    parser.add_argument('--input', help="Input data directory", default="ProteinMPNN/inputs/PDB_complexes/pdbs/")
+    parser.add_argument('--output', help="Output directory", default="/outputs/example_2_outputs")
+    parser.add_argument('--chains_to_design', help="Chains to design (space-separated)", default="A B")
+    parser.add_argument('--num_seq_per_target', type=int, default=2, help="Number of sequences per target")
+    parser.add_argument('--sampling_temp', type=float, default=0.1, help="Sampling temperature")
+    parser.add_argument('--seed', type=int, default=37, help="Random seed")
+    parser.add_argument('--batch_size', type=int, default=1, help="Batch size")
+    parser.add_argument('--precision', choices=['float32', 'bfloat16'], default='float32', help="Precision type for calculations")
+    parser.add_argument('--use_ipex', action='store_true', help="Enable IPEX optimizations")
+    args = parser.parse_args()
+
+    # Check and create output directory if it doesn't exist
+    output_dir = args.output
+    if not os.path.exists(output_dir):
+        os.makedirs(output_dir)
+
+    folder_with_pdbs = args.input
+    path_for_parsed_chains = os.path.join(output_dir, "parsed_pdbs.jsonl")
+    path_for_assigned_chains = os.path.join(output_dir, "assigned_pdbs.jsonl")
+
+    # Run parsing script
+    a = run([
+        'python', 'helper_scripts/parse_multiple_chains.py',
+        '--input_path', folder_with_pdbs,
+        '--output_path', path_for_parsed_chains
+    ])
+    assert a.returncode == 0, "Error parsing multiple chains"
+
+    # Run chain assignment script
+    a = run([
+        'python', 'helper_scripts/assign_fixed_chains.py',
+        '--input_path', path_for_parsed_chains,
+        '--output_path', path_for_assigned_chains,
+        '--chain_list', args.chains_to_design
+    ])
+    assert a.returncode == 0, "Error assigning fixed chains"
+
+    # Run protein folding script
+    a = run([
+        'python', 'protein_mpnn_run.py',
+        '--jsonl_path', path_for_parsed_chains,
+        '--chain_id_jsonl', path_for_assigned_chains,
+        '--out_folder', output_dir,
+        '--num_seq_per_target', str(args.num_seq_per_target),
+        '--sampling_temp', str(args.sampling_temp),
+        '--seed', str(args.seed),
+        '--batch_size', str(args.batch_size),
+        '--precision', args.precision
+    ] + (['--use_ipex'] if args.use_ipex else []))
+    assert a.returncode == 0, "Error running protein folding script"
+
+if __name__ == "__main__":
+    import sys
+    main(sys.argv)
+
diff --git a/examples/script_example_3.py b/examples/script_example_3.py
new file mode 100644
index 0000000..539eb87
--- /dev/null
+++ b/examples/script_example_3.py
@@ -0,0 +1,45 @@
+#!/usr/bin/env python
+# encoding: utf-8
+import os
+from subprocess import run
+from argparse import ArgumentParser
+
+def main(argv):
+    # Argument parsing
+    parser = ArgumentParser(description="Run protein folding on specific PDB and chains")
+    parser.add_argument('--pdb_path', help="Path to the PDB file", default="ProteinMPNN/inputs/PDB_complexes/pdbs/")
+    parser.add_argument('--chains_to_design', help="Chains to design (space-separated)", default="A")
+    parser.add_argument('--output', help="Output directory", default="/outputs/example_3_outputs")
+    parser.add_argument('--num_seq_per_target', type=int, default=2, help="Number of sequences per target")
+    parser.add_argument('--sampling_temp', type=float, default=0.1, help="Sampling temperature")
+    parser.add_argument('--seed', type=int, default=37, help="Random seed")
+    parser.add_argument('--batch_size', type=int, default=1, help="Batch size")
+    parser.add_argument('--precision', choices=['float32', 'bfloat16'], default='float32', help="Precision type for calculations")
+    parser.add_argument('--use_ipex', action='store_true', help="Enable IPEX optimizations")
+    args = parser.parse_args()
+
+    # Check and create output directory if it doesn't exist
+    output_dir = args.output
+    if not os.path.exists(output_dir):
+        os.makedirs(output_dir)
+
+    pdb_path = args.pdb_path
+
+    # Run protein folding script
+    a = run([
+        'python', 'protein_mpnn_run.py',
+        '--pdb_path', pdb_path,
+        '--pdb_path_chains', args.chains_to_design,
+        '--out_folder', output_dir,
+        '--num_seq_per_target', str(args.num_seq_per_target),
+        '--sampling_temp', str(args.sampling_temp),
+        '--seed', str(args.seed),
+        '--batch_size', str(args.batch_size),
+        '--precision', args.precision
+    ]+ (['--use_ipex'] if args.use_ipex else []))
+    assert a.returncode == 0, "Error running protein folding script"
+
+if __name__ == "__main__":
+    import sys
+    main(sys.argv)
+
diff --git a/examples/script_example_3_score_only.py b/examples/script_example_3_score_only.py
new file mode 100644
index 0000000..1ab9abd
--- /dev/null
+++ b/examples/script_example_3_score_only.py
@@ -0,0 +1,47 @@
+#!/usr/bin/env python
+# encoding: utf-8
+import os
+from subprocess import run
+from argparse import ArgumentParser
+
+def main(argv):
+    # Argument parsing
+    parser = ArgumentParser(description="Run protein folding and scoring on specific PDB and chains")
+    parser.add_argument('--pdb_path', help="Path to the PDB file", default="ProteinMPNN/inputs/PDB_complexes/pdbs/")
+    parser.add_argument('--chains_to_design', help="Chains to design (space-separated)", default="A")
+    parser.add_argument('--output', help="Output directory", default="/outputs/example_3_score_only_outputs")
+    parser.add_argument('--num_seq_per_target', type=int, default=2, help="Number of sequences per target")
+    parser.add_argument('--sampling_temp', type=float, default=0.1, help="Sampling temperature")
+    parser.add_argument('--score_only', type=int, default=1, help="Score only without sequence generation")
+    parser.add_argument('--seed', type=int, default=37, help="Random seed")
+    parser.add_argument('--batch_size', type=int, default=1, help="Batch size")
+    parser.add_argument('--precision', choices=['float32', 'bfloat16'], default='float32', help="Precision type for calculations")
+    parser.add_argument('--use_ipex', action='store_true', help="Enable IPEX optimizations")
+    args = parser.parse_args()
+
+    # Check and create output directory if it doesn't exist
+    output_dir = args.output
+    if not os.path.exists(output_dir):
+        os.makedirs(output_dir)
+
+    pdb_path = args.pdb_path
+
+    # Run protein folding script with scoring only
+    a = run([
+        'python', 'protein_mpnn_run.py',
+        '--pdb_path', pdb_path,
+        '--pdb_path_chains', args.chains_to_design,
+        '--out_folder', output_dir,
+        '--num_seq_per_target', str(args.num_seq_per_target),
+        '--sampling_temp', str(args.sampling_temp),
+        '--score_only', str(args.score_only),
+        '--seed', str(args.seed),
+        '--batch_size', str(args.batch_size),
+        '--precision', args.precision
+    ]+ (['--use_ipex'] if args.use_ipex else []))
+    assert a.returncode == 0, "Error running protein folding script"
+
+if __name__ == "__main__":
+    import sys
+    main(sys.argv)
+
diff --git a/examples/script_example_3_score_only_from_fasta.py b/examples/script_example_3_score_only_from_fasta.py
new file mode 100644
index 0000000..b90284c
--- /dev/null
+++ b/examples/script_example_3_score_only_from_fasta.py
@@ -0,0 +1,50 @@
+#!/usr/bin/env python
+# encoding: utf-8
+
+import os
+from subprocess import run
+from argparse import ArgumentParser
+
+def main(argv):
+    # Argument parsing
+    parser = ArgumentParser(description="Run protein folding and scoring from a FASTA file on specific PDB and chains")
+    parser.add_argument('--pdb_path', help="Path to the PDB file", default="ProteinMPNN/inputs/PDB_complexes/pdbs/")
+    parser.add_argument('--path_to_fasta', help="Path to the FASTA file", default="ProteinMPNN/outputs/example_3_outputs/seqs/")
+    parser.add_argument('--chains_to_design', help="Chains to design (space-separated)", default="A")
+    parser.add_argument('--output', help="Output directory", default="/outputs/example_3_score_only_from_fasta_outputs")
+    parser.add_argument('--num_seq_per_target', type=int, default=5, help="Number of sequences per target")
+    parser.add_argument('--sampling_temp', type=float, default=0.1, help="Sampling temperature")
+    parser.add_argument('--score_only', type=int, default=1, help="Score only without sequence generation")
+    parser.add_argument('--seed', type=int, default=13, help="Random seed")
+    parser.add_argument('--batch_size', type=int, default=1, help="Batch size")
+    parser.add_argument('--precision', choices=['float32', 'bfloat16'], default='float32', help="Precision type for calculations")
+    parser.add_argument('--use_ipex', action='store_true', help="Enable IPEX optimizations")
+    args = parser.parse_args()
+
+    # Check and create output directory if it doesn't exist
+    output_dir = args.output
+    if not os.path.exists(output_dir):
+        os.makedirs(output_dir)
+
+    pdb_path = args.pdb_path
+    path_to_fasta = args.path_to_fasta
+
+    # Run protein folding script with scoring only from FASTA
+    a = run([
+        'python', 'protein_mpnn_run.py',
+        '--path_to_fasta', path_to_fasta,
+        '--pdb_path', pdb_path,
+        '--pdb_path_chains', args.chains_to_design,
+        '--out_folder', output_dir,
+        '--num_seq_per_target', str(args.num_seq_per_target),
+        '--sampling_temp', str(args.sampling_temp),
+        '--score_only', str(args.score_only),
+        '--seed', str(args.seed),
+        '--batch_size', str(args.batch_size),
+        '--precision', args.precision
+    ]+ (['--use_ipex'] if args.use_ipex else []))
+    assert a.returncode == 0, "Error running protein folding script"
+
+if __name__ == "__main__":
+    import sys
+    main(sys.argv)
diff --git a/examples/script_example_4.py b/examples/script_example_4.py
new file mode 100644
index 0000000..6c6e19c
--- /dev/null
+++ b/examples/script_example_4.py
@@ -0,0 +1,77 @@
+#!/usr/bin/env python
+# encoding: utf-8
+import os
+from subprocess import run
+from argparse import ArgumentParser
+
+def main(argv):
+    # Argument parsing
+    parser = ArgumentParser(description="Run protein folding with fixed positions on specific chains")
+    parser.add_argument('--input', help="Input folder with PDBs", default="ProteinMPNN/inputs/PDB_complexes/pdbs/")
+    parser.add_argument('--output', help="Output directory", default="/outputs/example_4_outputs")
+    parser.add_argument('--chains_to_design', help="Chains to design (space-separated)", default="A C")
+    parser.add_argument('--fixed_positions', help="Fixed positions for the chains", default="1 2 3 4 5 6 7 8 23 25, 10 11 12 13 14 15 16 17 18 19 20 40")
+    parser.add_argument('--num_seq_per_target', type=int, default=2, help="Number of sequences per target")
+    parser.add_argument('--sampling_temp', type=float, default=0.1, help="Sampling temperature")
+    parser.add_argument('--seed', type=int, default=37, help="Random seed")
+    parser.add_argument('--batch_size', type=int, default=1, help="Batch size")
+    parser.add_argument('--precision', choices=['float32', 'bfloat16'], default='float32', help="Precision type for calculations")
+    parser.add_argument('--use_ipex', action='store_true', help="Enable IPEX optimizations")
+    args = parser.parse_args()
+
+    # Check and create output directory if it doesn't exist
+    output_dir = args.output
+    if not os.path.exists(output_dir):
+        os.makedirs(output_dir)
+
+    folder_with_pdbs = args.input
+    path_for_parsed_chains = os.path.join(output_dir, "parsed_pdbs.jsonl")
+    path_for_assigned_chains = os.path.join(output_dir, "assigned_pdbs.jsonl")
+    path_for_fixed_positions = os.path.join(output_dir, "fixed_pdbs.jsonl")
+
+    # Run parsing script
+    a = run([
+        'python', 'helper_scripts/parse_multiple_chains.py',
+        '--input_path', folder_with_pdbs,
+        '--output_path', path_for_parsed_chains
+    ])
+    assert a.returncode == 0, "Error parsing multiple chains"
+
+    # Assign chains to design
+    a = run([
+        'python', 'helper_scripts/assign_fixed_chains.py',
+        '--input_path', path_for_parsed_chains,
+        '--output_path', path_for_assigned_chains,
+        '--chain_list', args.chains_to_design
+    ])
+    assert a.returncode == 0, "Error assigning fixed chains"
+
+    # Make fixed positions dictionary
+    a = run([
+        'python', 'helper_scripts/make_fixed_positions_dict.py',
+        '--input_path', path_for_parsed_chains,
+        '--output_path', path_for_fixed_positions,
+        '--chain_list', args.chains_to_design,
+        '--position_list', args.fixed_positions
+    ])
+    assert a.returncode == 0, "Error making fixed positions dictionary"
+
+    # Run protein folding script
+    a = run([
+        'python', 'protein_mpnn_run.py',
+        '--jsonl_path', path_for_parsed_chains,
+        '--chain_id_jsonl', path_for_assigned_chains,
+        '--fixed_positions_jsonl', path_for_fixed_positions,
+        '--out_folder', output_dir,
+        '--num_seq_per_target', str(args.num_seq_per_target),
+        '--sampling_temp', str(args.sampling_temp),
+        '--seed', str(args.seed),
+        '--batch_size', str(args.batch_size),
+        '--precision', args.precision
+    ]+ (['--use_ipex'] if args.use_ipex else []))
+    assert a.returncode == 0, "Error running protein folding script"
+
+if __name__ == "__main__":
+    import sys
+    main(sys.argv)
+
diff --git a/examples/script_example_4_non_fixed.py b/examples/script_example_4_non_fixed.py
new file mode 100644
index 0000000..142ea48
--- /dev/null
+++ b/examples/script_example_4_non_fixed.py
@@ -0,0 +1,78 @@
+#!/usr/bin/env python
+# encoding: utf-8
+import os
+from subprocess import run
+from argparse import ArgumentParser
+
+def main(argv):
+    # Argument parsing
+    parser = ArgumentParser(description="Run protein folding with non-fixed positions on specific chains")
+    parser.add_argument('--input', help="Input folder with PDBs", default="ProteinMPNN/inputs/PDB_complexes/pdbs/")
+    parser.add_argument('--output', help="Output directory", default="/outputs/example_4_non_fixed_outputs")
+    parser.add_argument('--chains_to_design', help="Chains to design (space-separated)", default="A C")
+    parser.add_argument('--design_only_positions', help="Design only these positions", default="1 2 3 4 5 6 7 8 9 10, 3 4 5 6 7 8")
+    parser.add_argument('--num_seq_per_target', type=int, default=2, help="Number of sequences per target")
+    parser.add_argument('--sampling_temp', type=float, default=0.1, help="Sampling temperature")
+    parser.add_argument('--seed', type=int, default=37, help="Random seed")
+    parser.add_argument('--batch_size', type=int, default=1, help="Batch size")
+    parser.add_argument('--precision', choices=['float32', 'bfloat16'], default='float32', help="Precision type for calculations")
+    parser.add_argument('--use_ipex', action='store_true', help="Enable IPEX optimizations")
+    args = parser.parse_args()
+
+    # Check and create output directory if it doesn't exist
+    output_dir = args.output
+    if not os.path.exists(output_dir):
+        os.makedirs(output_dir)
+
+    folder_with_pdbs = args.input
+    path_for_parsed_chains = os.path.join(output_dir, "parsed_pdbs.jsonl")
+    path_for_assigned_chains = os.path.join(output_dir, "assigned_pdbs.jsonl")
+    path_for_fixed_positions = os.path.join(output_dir, "fixed_pdbs.jsonl")
+
+    # Run parsing script
+    a = run([
+        'python', 'helper_scripts/parse_multiple_chains.py',
+        '--input_path', folder_with_pdbs,
+        '--output_path', path_for_parsed_chains
+    ])
+    assert a.returncode == 0, "Error parsing multiple chains"
+
+    # Assign chains to design
+    a = run([
+        'python', 'helper_scripts/assign_fixed_chains.py',
+        '--input_path', path_for_parsed_chains,
+        '--output_path', path_for_assigned_chains,
+        '--chain_list', args.chains_to_design
+    ])
+    assert a.returncode == 0, "Error assigning fixed chains"
+
+    # Make non-fixed positions dictionary
+    a = run([
+        'python', 'helper_scripts/make_fixed_positions_dict.py',
+        '--input_path', path_for_parsed_chains,
+        '--output_path', path_for_fixed_positions,
+        '--chain_list', args.chains_to_design,
+        '--position_list', args.design_only_positions,
+        '--specify_non_fixed'
+    ])
+    assert a.returncode == 0, "Error making non-fixed positions dictionary"
+
+    # Run protein folding script
+    a = run([
+        'python', 'protein_mpnn_run.py',
+        '--jsonl_path', path_for_parsed_chains,
+        '--chain_id_jsonl', path_for_assigned_chains,
+        '--fixed_positions_jsonl', path_for_fixed_positions,
+        '--out_folder', output_dir,
+        '--num_seq_per_target', str(args.num_seq_per_target),
+        '--sampling_temp', str(args.sampling_temp),
+        '--seed', str(args.seed),
+        '--batch_size', str(args.batch_size),
+        '--precision', args.precision
+    ]+ (['--use_ipex'] if args.use_ipex else []))
+    assert a.returncode == 0, "Error running protein folding script"
+
+if __name__ == "__main__":
+    import sys
+    main(sys.argv)
+
diff --git a/examples/script_example_5.py b/examples/script_example_5.py
new file mode 100644
index 0000000..b9e9cad
--- /dev/null
+++ b/examples/script_example_5.py
@@ -0,0 +1,92 @@
+#!/usr/bin/env python
+# encoding: utf-8
+
+import os
+from subprocess import run
+from argparse import ArgumentParser
+
+def main(argv):
+    # Argument parsing
+    parser = ArgumentParser(description="Run ProteinMPNN pipeline with multiple chains and positions")
+    parser.add_argument('--input', help="Input data directory", default="ProteinMPNN/inputs/PDB_complexes/pdbs/")
+    parser.add_argument('--output', help="Output directory", default="/outputs/example_5_outputs")
+    parser.add_argument('--chains_to_design', default="A C", help="Chains to design")
+    parser.add_argument('--fixed_positions', default="9 10 11 12 13 14 15 16 17 18 19 20 21 22 23, 10 11 18 19 20 22", help="Fixed positions for the chains")
+    parser.add_argument('--tied_positions', default="1 2 3 4 5 6 7 8, 1 2 3 4 5 6 7 8", help="Tied positions for the chains")
+    parser.add_argument('--num_seq_per_target', type=int, default=2, help="Number of sequences per target")
+    parser.add_argument('--sampling_temp', type=float, default=0.1, help="Sampling temperature")
+    parser.add_argument('--seed', type=int, default=37, help="Random seed")
+    parser.add_argument('--batch_size', type=int, default=1, help="Batch size")
+    parser.add_argument('--precision', choices=['float32', 'bfloat16'], default='float32', help="Precision type for calculations")
+    parser.add_argument('--use_ipex', action='store_true', help="Enable IPEX optimizations")
+    args = parser.parse_args()
+
+    # Check and create output directory if it doesn't exist
+    output_dir = args.output
+    if not os.path.exists(output_dir):
+        os.makedirs(output_dir)
+
+    # Paths for output files
+    folder_with_pdbs = args.input
+    path_for_parsed_chains = os.path.join(output_dir, "parsed_pdbs.jsonl")
+    path_for_assigned_chains = os.path.join(output_dir, "assigned_pdbs.jsonl")
+    path_for_fixed_positions = os.path.join(output_dir, "fixed_pdbs.jsonl")
+    path_for_tied_positions = os.path.join(output_dir, "tied_pdbs.jsonl")
+
+    # Run the parsing script
+    a = run([
+        'python', 'helper_scripts/parse_multiple_chains.py',
+        '--input_path', folder_with_pdbs,
+        '--output_path', path_for_parsed_chains
+    ])
+    assert a.returncode == 0, "Error parsing multiple chains"
+
+    # Run the chain assignment script
+    a = run([
+        'python', 'helper_scripts/assign_fixed_chains.py',
+        '--input_path', path_for_parsed_chains,
+        '--output_path', path_for_assigned_chains,
+        '--chain_list', args.chains_to_design
+    ])
+    assert a.returncode == 0, "Error assigning fixed chains"
+
+    # Run the fixed positions script
+    a = run([
+        'python', 'helper_scripts/make_fixed_positions_dict.py',
+        '--input_path', path_for_parsed_chains,
+        '--output_path', path_for_fixed_positions,
+        '--chain_list', args.chains_to_design,
+        '--position_list', args.fixed_positions
+    ])
+    assert a.returncode == 0, "Error making fixed positions dict"
+
+    # Run the tied positions script
+    a = run([
+        'python', 'helper_scripts/make_tied_positions_dict.py',
+        '--input_path', path_for_parsed_chains,
+        '--output_path', path_for_tied_positions,
+        '--chain_list', args.chains_to_design,
+        '--position_list', args.tied_positions
+    ])
+    assert a.returncode == 0, "Error making tied positions dict"
+
+    # Run the main ProteinMPNN script
+    a = run([
+        'python', 'protein_mpnn_run.py',
+        '--jsonl_path', path_for_parsed_chains,
+        '--chain_id_jsonl', path_for_assigned_chains,
+        '--fixed_positions_jsonl', path_for_fixed_positions,
+        '--tied_positions_jsonl', path_for_tied_positions,
+        '--out_folder', output_dir,
+        '--num_seq_per_target', str(args.num_seq_per_target),
+        '--sampling_temp', str(args.sampling_temp),
+        '--seed', str(args.seed),
+        '--batch_size', str(args.batch_size),
+        '--precision', args.precision
+    ]+ (['--use_ipex'] if args.use_ipex else []))
+    assert a.returncode == 0, "Error running protein folding script"
+
+if __name__ == "__main__":
+    import sys
+    main(sys.argv)
+
diff --git a/examples/script_example_6.py b/examples/script_example_6.py
new file mode 100644
index 0000000..9f84390
--- /dev/null
+++ b/examples/script_example_6.py
@@ -0,0 +1,67 @@
+#!/usr/bin/env python
+# encoding: utf-8
+
+import os
+from subprocess import run
+from argparse import ArgumentParser
+
+def main(argv):
+    # Argument parsing
+    parser = ArgumentParser(description="Run ProteinMPNN pipeline with homooligomers and tied positions")
+    parser.add_argument('--input', help="Input data directory", default="ProteinMPNN/inputs/PDB_homooligomers/pdbs/")
+    parser.add_argument('--output', help="Output directory", default="/outputs/example_6_outputs")
+    parser.add_argument('--homooligomer', type=int, default=1, help="Homooligomer flag")
+    parser.add_argument('--num_seq_per_target', type=int, default=2, help="Number of sequences per target")
+    parser.add_argument('--sampling_temp', type=float, default=0.2, help="Sampling temperature")
+    parser.add_argument('--seed', type=int, default=37, help="Random seed")
+    parser.add_argument('--batch_size', type=int, default=1, help="Batch size")
+    parser.add_argument('--precision', choices=['float32', 'bfloat16'], default='float32', help="Precision type for calculations")
+    parser.add_argument('--use_ipex', action='store_true', help="Enable IPEX optimizations")
+    args = parser.parse_args()
+
+    # Check and create output directory if it doesn't exist
+    output_dir = args.output
+    if not os.path.exists(output_dir):
+        os.makedirs(output_dir)
+
+    # Paths for output files
+    folder_with_pdbs = args.input
+    path_for_parsed_chains = os.path.join(output_dir, "parsed_pdbs.jsonl")
+    path_for_tied_positions = os.path.join(output_dir, "tied_pdbs.jsonl")
+    path_for_designed_sequences = os.path.join(output_dir, "temp_0.1")
+
+    # Run the parsing script
+    a = run([
+        'python', 'helper_scripts/parse_multiple_chains.py',
+        '--input_path', folder_with_pdbs,
+        '--output_path', path_for_parsed_chains
+    ])
+    assert a.returncode == 0, "Error parsing multiple chains"
+
+    # Run the tied positions script
+    a = run([
+        'python', 'helper_scripts/make_tied_positions_dict.py',
+        '--input_path', path_for_parsed_chains,
+        '--output_path', path_for_tied_positions,
+        '--homooligomer', str(args.homooligomer)
+    ])
+    assert a.returncode == 0, "Error making tied positions dict"
+
+    # Run the main ProteinMPNN script
+    a = run([
+        'python', 'protein_mpnn_run.py',
+        '--jsonl_path', path_for_parsed_chains,
+        '--tied_positions_jsonl', path_for_tied_positions,
+        '--out_folder', output_dir,
+        '--num_seq_per_target', str(args.num_seq_per_target),
+        '--sampling_temp', str(args.sampling_temp),
+        '--seed', str(args.seed),
+        '--batch_size', str(args.batch_size),
+        '--precision', args.precision
+    ]+ (['--use_ipex'] if args.use_ipex else []))
+    assert a.returncode == 0, "Error running protein folding script"
+
+if __name__ == "__main__":
+    import sys
+    main(sys.argv)
+
diff --git a/examples/script_example_7.py b/examples/script_example_7.py
new file mode 100644
index 0000000..eca676a
--- /dev/null
+++ b/examples/script_example_7.py
@@ -0,0 +1,56 @@
+#!/usr/bin/env python
+# encoding: utf-8
+
+import os
+from subprocess import run
+from argparse import ArgumentParser
+
+def main(argv):
+    # Argument parsing
+    parser = ArgumentParser(description="Run ProteinMPNN pipeline for monomers")
+    parser.add_argument('--input', help="Input data directory", default="ProteinMPNN/inputs/PDB_monomers/pdbs/")
+    parser.add_argument('--output', help="Output directory", default="/outputs/example_7_outputs")
+    parser.add_argument('--num_seq_per_target', type=int, default=1, help="Number of sequences per target")
+    parser.add_argument('--sampling_temp', type=float, default=0.1, help="Sampling temperature")
+    parser.add_argument('--unconditional_probs_only', type=int, default=1, help="Use unconditional probabilities only")
+    parser.add_argument('--seed', type=int, default=37, help="Random seed")
+    parser.add_argument('--batch_size', type=int, default=1, help="Batch size")
+    parser.add_argument('--precision', choices=['float32', 'bfloat16'], default='float32', help="Precision type for calculations")
+    parser.add_argument('--use_ipex', action='store_true', help="Enable IPEX optimizations")
+    args = parser.parse_args()
+
+    # Check and create output directory if it doesn't exist
+    output_dir = args.output
+    if not os.path.exists(output_dir):
+        os.makedirs(output_dir)
+
+    # Paths for output files
+    folder_with_pdbs = args.input
+    path_for_parsed_chains = os.path.join(output_dir, "parsed_pdbs.jsonl")
+
+    # Run the parsing script
+    a = run([
+        'python', 'helper_scripts/parse_multiple_chains.py',
+        '--input_path', folder_with_pdbs,
+        '--output_path', path_for_parsed_chains
+    ])
+    assert a.returncode == 0, "Error parsing multiple chains"
+
+    # Run the main ProteinMPNN script
+    a = run([
+        'python', 'protein_mpnn_run.py',
+        '--jsonl_path', path_for_parsed_chains,
+        '--out_folder', output_dir,
+        '--num_seq_per_target', str(args.num_seq_per_target),
+        '--sampling_temp', str(args.sampling_temp),
+        '--unconditional_probs_only', str(args.unconditional_probs_only),
+        '--seed', str(args.seed),
+        '--batch_size', str(args.batch_size),
+        '--precision', args.precision
+    ]+ (['--use_ipex'] if args.use_ipex else []))
+    assert a.returncode == 0, "Error running protein folding script"
+
+if __name__ == "__main__":
+    import sys
+    main(sys.argv)
+
diff --git a/examples/script_example_8.py b/examples/script_example_8.py
new file mode 100644
index 0000000..4939eb4
--- /dev/null
+++ b/examples/script_example_8.py
@@ -0,0 +1,67 @@
+#!/usr/bin/env python
+# encoding: utf-8
+
+import os
+from subprocess import run
+from argparse import ArgumentParser
+
+def main(argv):
+    # Argument parsing
+    parser = ArgumentParser(description="Run ProteinMPNN pipeline with amino acid bias")
+    parser.add_argument('--input', help="Input data directory", default="ProteinMPNN/inputs/PDB_monomers/pdbs/")
+    parser.add_argument('--output', help="Output directory", default="/outputs/example_8_outputs")
+    parser.add_argument('--num_seq_per_target', type=int, default=2, help="Number of sequences per target")
+    parser.add_argument('--sampling_temp', type=float, default=0.1, help="Sampling temperature")
+    parser.add_argument('--seed', type=int, default=37, help="Random seed")
+    parser.add_argument('--batch_size', type=int, default=1, help="Batch size")
+    parser.add_argument('--AA_list', default="D E H K N Q R S T W Y", help="List of amino acids")
+    parser.add_argument('--bias_list', default="1.39 1.39 1.39 1.39 1.39 1.39 1.39 1.39 1.39 1.39 1.39", help="Bias list for amino acids")
+    parser.add_argument('--precision', choices=['float32', 'bfloat16'], default='float32', help="Precision type for calculations")
+    parser.add_argument('--use_ipex', action='store_true', help="Enable IPEX optimizations")
+    args = parser.parse_args()
+
+    # Check and create output directory if it doesn't exist
+    output_dir = args.output
+    if not os.path.exists(output_dir):
+        os.makedirs(output_dir)
+
+    # Paths for output files
+    folder_with_pdbs = args.input
+    path_for_bias = os.path.join(output_dir, "bias_pdbs.jsonl")
+    path_for_parsed_chains = os.path.join(output_dir, "parsed_pdbs.jsonl")
+
+    # Run the script to create amino acid bias
+    a = run([
+        'python', 'helper_scripts/make_bias_AA.py',
+        '--output_path', path_for_bias,
+        '--AA_list', args.AA_list,
+        '--bias_list', args.bias_list
+    ])
+    assert a.returncode == 0, "Error creating bias amino acid list"
+
+    # Run the parsing script
+    a = run([
+        'python', 'helper_scripts/parse_multiple_chains.py',
+        '--input_path', folder_with_pdbs,
+        '--output_path', path_for_parsed_chains
+    ])
+    assert a.returncode == 0, "Error parsing multiple chains"
+
+    # Run the main ProteinMPNN script
+    a = run([
+        'python', 'protein_mpnn_run.py',
+        '--jsonl_path', path_for_parsed_chains,
+        '--out_folder', output_dir,
+        '--bias_AA_jsonl', path_for_bias,
+        '--num_seq_per_target', str(args.num_seq_per_target),
+        '--sampling_temp', str(args.sampling_temp),
+        '--seed', str(args.seed),
+        '--batch_size', str(args.batch_size),
+        '--precision', args.precision
+    ]+ (['--use_ipex'] if args.use_ipex else []))
+    assert a.returncode == 0, "Error running protein folding script"
+
+if __name__ == "__main__":
+    import sys
+    main(sys.argv)
+
diff --git a/examples/script_example_pssm.py b/examples/script_example_pssm.py
new file mode 100644
index 0000000..e8324cc
--- /dev/null
+++ b/examples/script_example_pssm.py
@@ -0,0 +1,83 @@
+#!/usr/bin/env python
+# encoding: utf-8
+
+import os
+from subprocess import run
+from argparse import ArgumentParser
+
+def main(argv):
+    # Argument parsing
+    parser = ArgumentParser(description="Run ProteinMPNN pipeline with PSSM inputs")
+    parser.add_argument('--pssm_input', help="PSSM input directory", default="ProteinMPNN/inputs/PSSM_inputs")
+    parser.add_argument('--input', help="Input data directory", default="ProteinMPNN/inputs/PDB_complexes/pdbs/")
+    parser.add_argument('--output', help="Output directory", default="/outputs/example_pssm_outputs")
+    parser.add_argument('--chains_to_design', default="A B", help="Chains to design")
+    parser.add_argument('--num_seq_per_target', type=int, default=2, help="Number of sequences per target")
+    parser.add_argument('--sampling_temp', type=float, default=0.1, help="Sampling temperature")
+    parser.add_argument('--seed', type=int, default=37, help="Random seed")
+    parser.add_argument('--batch_size', type=int, default=1, help="Batch size")
+    parser.add_argument('--pssm_multi', type=float, default=0.3, help="PSSM multiplier")
+    parser.add_argument('--pssm_bias_flag', type=int, default=1, help="PSSM bias flag")
+    parser.add_argument('--precision', choices=['float32', 'bfloat16'], default='float32', help="Precision type for calculations")
+    parser.add_argument('--use_ipex', action='store_true', help="Enable IPEX optimizations")
+    args = parser.parse_args()
+
+    # Check and create output directory if it doesn't exist
+    output_dir = args.output
+    if not os.path.exists(output_dir):
+        os.makedirs(output_dir)
+
+    # Paths for output files
+    folder_with_pdbs = args.input
+    pssm_input_path = args.pssm_input
+    path_for_parsed_chains = os.path.join(output_dir, "parsed_pdbs.jsonl")
+    path_for_assigned_chains = os.path.join(output_dir, "assigned_pdbs.jsonl")
+    pssm_output_path = os.path.join(output_dir, "pssm.jsonl")
+
+    # Run parsing script
+    a = run([
+        'python', 'helper_scripts/parse_multiple_chains.py',
+        '--input_path', folder_with_pdbs,
+        '--output_path', path_for_parsed_chains
+    ])
+    assert a.returncode == 0, "Error parsing multiple chains"
+
+    # Run assign fixed chains script
+    a = run([
+        'python', 'helper_scripts/assign_fixed_chains.py',
+        '--input_path', path_for_parsed_chains,
+        '--output_path', path_for_assigned_chains,
+        '--chain_list', args.chains_to_design
+    ])
+    assert a.returncode == 0, "Error assigning fixed chains"
+
+    # Run make PSSM input dictionary script
+    a = run([
+        'python', 'helper_scripts/make_pssm_input_dict.py',
+        '--jsonl_input_path', path_for_parsed_chains,
+        '--PSSM_input_path', pssm_input_path,
+        '--output_path', pssm_output_path
+    ])
+    assert a.returncode == 0, "Error creating PSSM input dictionary"
+
+    # Run the main ProteinMPNN script with PSSM
+    a = run([
+        'python', 'protein_mpnn_run.py',
+        '--jsonl_path', path_for_parsed_chains,
+        '--chain_id_jsonl', path_for_assigned_chains,
+        '--out_folder', output_dir,
+        '--num_seq_per_target', str(args.num_seq_per_target),
+        '--sampling_temp', str(args.sampling_temp),
+        '--seed', str(args.seed),
+        '--batch_size', str(args.batch_size),
+        '--pssm_jsonl', pssm_output_path,
+        '--pssm_multi', str(args.pssm_multi),
+        '--pssm_bias_flag', str(args.pssm_bias_flag),
+        '--precision', args.precision
+    ]+ (['--use_ipex'] if args.use_ipex else []))
+    assert a.returncode == 0, "Error running protein folding script"
+
+if __name__ == "__main__":
+    import sys
+    main(sys.argv)
+
diff --git a/protein_mpnn_run.py b/protein_mpnn_run.py
index 27816ee..4efd2d1 100644
--- a/protein_mpnn_run.py
+++ b/protein_mpnn_run.py
@@ -17,6 +17,7 @@ def main(args):
     import random
     import os.path
     import subprocess
+    import intel_extension_for_pytorch as ipex
     
     from protein_mpnn_utils import loss_nll, loss_smoothed, gather_edges, gather_nodes, gather_nodes_t, cat_neighbors_nodes, _scores, _S_to_seq, tied_featurize, parse_PDB, parse_fasta
     from protein_mpnn_utils import StructureDataset, StructureDatasetPDB, ProteinMPNN
@@ -65,7 +66,7 @@ def main(args):
     alphabet_dict = dict(zip(alphabet, range(21)))    
     print_all = args.suppress_print == 0 
     omit_AAs_np = np.array([AA in omit_AAs_list for AA in alphabet]).astype(np.float32)
-    device = torch.device("cuda:0" if (torch.cuda.is_available()) else "cpu")
+    device = torch.device("cpu")
     if os.path.isfile(args.chain_id_jsonl):
         with open(args.chain_id_jsonl, 'r') as json_file:
             json_list = list(json_file)
@@ -181,6 +182,15 @@ def main(args):
     model.to(device)
     model.load_state_dict(checkpoint['model_state_dict'])
     model.eval()
+    if args.precision == 'bfloat16':
+        model = model.to(dtype=torch.bfloat16)
+    else:
+        model = model.to(dtype=torch.float32)
+    if args.use_ipex:
+        if args.precision == 'bfloat16':
+            model = ipex.optimize(model, dtype=torch.bfloat16)
+        else:
+            model = ipex.optimize(model, dtype=torch.float32)
 
     if print_all:
         print(40*'-')
@@ -223,8 +233,15 @@ def main(args):
     total_residues = 0
     protein_list = []
     total_step = 0
+    if args.precision == 'bfloat16':
+        dtype = torch.bfloat16
+        enabled = True
+        torch.set_default_dtype(dtype)
+    else:
+        dtype = torch.float32
+        enabled = False
     # Validation epoch
-    with torch.no_grad():
+    with torch.no_grad(), torch.autocast(enabled=enabled,dtype=dtype,device_type="cpu"):
         test_sum, test_weights = 0., 0.
         for ix, protein in enumerate(dataset_valid):
             score_list = []
@@ -307,6 +324,8 @@ def main(args):
                 np.savez(unconditional_probs_only_file, log_p=concat_log_p, S=S[0,].cpu().numpy(), mask=mask[0,].cpu().numpy(), design_mask=mask_out)
             else:
                 randn_1 = torch.randn(chain_M.shape, device=X.device)
+                if args.precision == "bfloat16":
+                    mask = mask.to(torch.bfloat16)
                 log_probs = model(X, S, mask, chain_M*chain_M_pos, residue_idx, chain_encoding_all, randn_1)
                 mask_for_loss = mask*chain_M*chain_M_pos
                 scores = _scores(S, log_probs, mask_for_loss) #score only the redesigned part
@@ -340,7 +359,7 @@ def main(args):
                             global_scores = global_scores.cpu().data.numpy()
                             
                             all_probs_list.append(sample_dict["probs"].cpu().data.numpy())
-                            all_log_probs_list.append(log_probs.cpu().data.numpy())
+                            all_log_probs_list.append(log_probs.float().cpu().data.numpy())
                             S_sample_list.append(S_sample.cpu().data.numpy())
                             for b_ix in range(BATCH_COPIES):
                                 masked_chain_length_list = masked_chain_length_list_list[b_ix]
@@ -464,6 +483,9 @@ if __name__ == "__main__":
     argparser.add_argument("--pssm_bias_flag", type=int, default=0, help="0 for False, 1 for True")
     
     argparser.add_argument("--tied_positions_jsonl", type=str, default='', help="Path to a dictionary with tied positions")
-    
+    argparser.add_argument("--precision", type=str, choices=["float32", "bfloat16"], help="Floating-point precision to use (float32 or bfloat16)")
+    argparser.add_argument("--use_ipex", action="store_true",help="Enable IPEX optimizations if set. Otherwise, run without IPEX")
+
+
     args = argparser.parse_args()    
     main(args)   
diff --git a/setup_proteinmpnn.sh b/setup_proteinmpnn.sh
new file mode 100644
index 0000000..b67ce4c
--- /dev/null
+++ b/setup_proteinmpnn.sh
@@ -0,0 +1,85 @@
+#!/bin/bash
+
+set -e
+trap 'echo "Error on line $LINENO"; exit 1;' ERR
+
+SCRIPT_PATH="${BASH_SOURCE:-$0}"
+ABS_SCRIPT_PATH="$(realpath "${SCRIPT_PATH}")"
+ABS_DIRECTORY="$(dirname "${ABS_SCRIPT_PATH}")"
+
+CONDA_INSTALL_DIR=$(realpath ./miniforge3)
+
+# Parse command line arguments
+while (( "$#" )); do
+  case "$1" in
+    -p)
+      CONDA_INSTALL_DIR=$2
+      CONDA_INSTALL_DIR=$(realpath "$CONDA_INSTALL_DIR")
+      shift 2
+      ;;
+    -*|--*=)
+      echo "Error: Unsupported flag $1" >&2
+      exit 1
+      ;;
+    *)
+      echo "Error: Unsupported argument $1" >&2
+      exit 1
+      ;;
+  esac
+done
+
+# Check if Miniforge3 exists
+if [ ! -d "$CONDA_INSTALL_DIR" ]; then
+  echo "Miniforge3 is not installed. Installing..."
+  command -v wget >/dev/null 2>&1 || { echo "wget is required but not installed. Exiting."; exit 1; }
+  wget https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh
+  bash Miniforge3-Linux-x86_64.sh -b -p "$CONDA_INSTALL_DIR"
+  echo "Miniforge3 installation complete."
+else
+  echo "Miniforge3 is already installed at: $CONDA_INSTALL_DIR"
+fi
+
+export PATH="$CONDA_INSTALL_DIR/bin:$PATH"
+
+# Clone the ProteinMPNN repository
+if [ ! -d "ProteinMPNN" ]; then
+  git clone https://github.com/dauparas/ProteinMPNN.git
+else
+  echo "ProteinMPNN repository already exists, skipping git clone."
+fi
+
+cd ProteinMPNN
+git checkout 8907e6671bfbfc92303b5f79c4b5e6ce47cdef57
+PATCH_FILE="$ABS_DIRECTORY/ProteinMPNN.patch"
+if [ -f "$PATCH_FILE" ]; then
+  if git apply --reverse --check "$PATCH_FILE" > /dev/null 2>&1; then
+    echo "Patch has already been applied. Skipping patch step."
+  else
+    git apply "$PATCH_FILE"
+    echo "Patch applied successfully."
+  fi
+else
+  echo "Error: Patch file not found at $PATCH_FILE" >&2
+  exit 1
+fi
+
+# Create and activate the Conda environment
+#source "$CONDA_INSTALL_DIR/bin/activate"
+if conda env list | grep -q "^p_mpnn"; then
+	echo "Environment exists. Moving ahead without create the env. If the setup crashes, please remove manually."
+    else
+	echo "Creating conda env p_mpnn.."
+	conda create -n p_mpnn -y python=3.11 pip=24.0
+fi
+
+source $CONDA_INSTALL_DIR/bin/activate p_mpnn
+#conda activate p_mpnn
+
+conda install -n p_mpnn -y pytorch==2.3.1 torchvision==0.18.1 torchaudio==2.3.1 -c pytorch
+pip install intel-extension-for-pytorch==2.3.100
+pip install numpy==1.26.0
+
+echo "setup complete!"
+echo "Note:"
+echo "Conda (Miniforge3) is installed at $CONDA_INSTALL_DIR"
+echo "To manually activate conda env, do: source $CONDA_INSTALL_DIR/bin/activate SE3nv"
