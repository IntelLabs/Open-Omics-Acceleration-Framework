diff --git a/esm/models/esm3.py b/esm/models/esm3.py
index cbe02dd..b6df418 100644
--- a/esm/models/esm3.py
+++ b/esm/models/esm3.py
@@ -227,7 +227,10 @@ class ESM3(nn.Module, ESM3InferenceClient):
 
     @classmethod
     def from_pretrained(
-        cls, model_name: str = ESM3_OPEN_SMALL, device: torch.device | None = None
+        cls, 
+        model_name: str = ESM3_OPEN_SMALL, 
+        device: torch.device | None = None, 
+        bf16: bool = False  # Add bf16 argument
     ) -> ESM3:
         from esm.pretrained import load_local_model
 
@@ -236,7 +239,14 @@ class ESM3(nn.Module, ESM3InferenceClient):
             raise ValueError(f"Model name {model_name} is not a valid ESM3 model name.")
         if device is None:
             device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
+        # Determine dtype based on bf16 flag
+        if bf16:
+            dtype = torch.bfloat16
+        else:
+            dtype = torch.float32
+        print("Selected data type:", dtype)
         model = load_local_model(model_name, device=device)
+        model = model.to(dtype)
         if device.type != "cpu":
             model = model.to(torch.bfloat16)
         assert isinstance(model, ESM3)
diff --git a/esm/models/esmc.py b/esm/models/esmc.py
index 0807a21..e93085e 100644
--- a/esm/models/esmc.py
+++ b/esm/models/esmc.py
@@ -77,13 +77,23 @@ class ESMC(nn.Module, ESMCInferenceClient):
 
     @classmethod
     def from_pretrained(
-        cls, model_name: str = ESMC_600M, device: torch.device | None = None
+        cls, model_name: str = ESMC_600M, device: torch.device | None = None,
+        bf16: bool = False,  # Add bf16 argument
     ) -> ESMC:
         from esm.pretrained import load_local_model
 
         if device is None:
             device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
+        # Determine dtype based on bf16 flag
+        if bf16:
+            dtype = torch.bfloat16
+        else:
+            dtype = torch.float32
+
+        print("Selected data type ESMC :", dtype)
+        print("model_name ESMC",model_name)
         model = load_local_model(model_name, device=device)
+        model = model.to(dtype)
         if device.type != "cpu":
             model = model.to(torch.bfloat16)
         assert isinstance(model, ESMC)
diff --git a/esm/utils/structure/affine3d.py b/esm/utils/structure/affine3d.py
index 382abcd..db201d6 100644
--- a/esm/utils/structure/affine3d.py
+++ b/esm/utils/structure/affine3d.py
@@ -124,7 +124,7 @@ class RotationMatrix(Rotation):
         with fp32_autocast_context(self.device.type):
             if self._rots.shape[-3] == 1:
                 # This is a slight speedup over einsum for batched rotations
-                return p @ self._rots.transpose(-1, -2).squeeze(-3)
+                return p.float() @ self._rots.float().transpose(-1, -2).squeeze(-3)
             else:
                 # einsum way faster than bmm!
                 return torch.einsum("...ij,...j", self._rots, p)
