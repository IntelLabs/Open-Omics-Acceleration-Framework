ARG FROM_IMAGE=ubuntu:22.04
# Install Base miniconda image
ARG BASE_IMAGE=condaforge/miniforge3:23.1.0-3
FROM ${BASE_IMAGE} as conda_setup
ENV DEBIAN_FRONTEND=noninteractive

# Non-root user setup
ENV SERVICE_NAME="alphafold2-inf-service"

RUN groupadd --gid 1001 $SERVICE_NAME && \
    useradd -m -g $SERVICE_NAME --shell /bin/false --uid 1001 $SERVICE_NAME

# Install Anaconda and PIP dependency
RUN conda update -n base conda
RUN conda install python==3.11
RUN conda install -y -c conda-forge gcc_linux-64==12.1.0 gxx_linux-64==12.1.0
RUN conda install -y -c conda-forge openmm==8.0.0 pdbfixer==1.9
RUN conda install -y bioconda::kalign2==2.04
RUN conda install -y -c conda-forge mkl==2024.2.0 mkl-devel==2024.2.0
RUN python -m pip install onednn-cpu-iomp==2023.2.0
RUN python -m pip install torch==2.1.0 pybind11==2.11.1
RUN python -m pip install absl-py==2.0.0 biopython==1.81 chex==0.1.84 dm-haiku==0.0.10 dm-tree==0.1.8 immutabledict==3.0.0  ml-collections==0.1.1 numpy==1.26.1 scipy==1.11.3 tensorflow==2.14.0 pandas==2.1.1 psutil==5.9.6 tqdm==4.65.0 joblib==1.3.2 pragzip==0.6.0
RUN python -m pip install jax==0.4.21 jaxlib==0.4.21
RUN python -m pip install intel-extension-for-pytorch==2.1.0 intel-openmp==2024.2.0
RUN conda install -y -c conda-forge autoconf==2.71
RUN conda install -y -c conda-forge make==4.3


FROM ${FROM_IMAGE} as builder
ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    git build-essential cmake wget tzdata gcc curl gnupg gnupg2 gnupg1 sudo kalign autoconf numactl time vim tar ca-certificates -y\
    && rm -rf /var/lib/apt/lists/* \
    && apt-get autoremove -y \
    && apt-get clean
RUN apt update

COPY --from=conda_setup /opt/conda /opt/conda
ENV PATH "/opt/conda/bin:$PATH"
RUN echo "source activate" >> ~/.bashrc
CMD source ~/.bashrc

WORKDIR /
RUN wget https://github.com/IntelLabs/Open-Omics-Acceleration-Framework/releases/download/3.0/Source_code_with_submodules.tar.gz 
RUN tar -xzf Source_code_with_submodules.tar.gz
WORKDIR /Open-Omics-Acceleration-Framework/applications/

RUN git clone --branch 5.3.0 https://github.com/jemalloc/jemalloc.git
WORKDIR /Open-Omics-Acceleration-Framework/applications/jemalloc
RUN bash autogen.sh --prefix=/opt/conda/ && make install
WORKDIR /Open-Omics-Acceleration-Framework/applications
RUN rm -rf jemalloc

ENV PATH="/usr/bin:$PATH"
ENV PATH "/opt/conda/bin:$PATH"
ENV LD_LIBRARY_PATH "/opt/conda/lib:$LD_LIBRARY_PATH"



WORKDIR /Open-Omics-Acceleration-Framework/applications/alphafold/
WORKDIR /Open-Omics-Acceleration-Framework/applications/alphafold/tpp-pytorch-extension
RUN CC=gcc && CXX=g++ && python setup.py install \
    && python -c "from tpp_pytorch_extension.alphafold.Alpha_Attention import GatingAttentionOpti_forward"

WORKDIR /Open-Omics-Acceleration-Framework/applications/alphafold/
RUN wget -q -P ./alphafold/common/ https://git.scicore.unibas.ch/schwede/openstructure/-/raw/7102c63615b64735c4941278d92b554ec94415f8/modules/mol/alg/src/stereo_chemical_props.txt --no-check-certificate


# Swith to Non-root user
RUN chown -R $SERVICE_NAME:$SERVICE_NAME /Open-Omics-Acceleration-Framework
USER $SERVICE_NAME

HEALTHCHECK NONE

ENV PATH "/opt/conda/bin:$PATH"
ENV LD_LIBRARY_PATH "/opt/conda/lib:$LD_LIBRARY_PATH"

COPY ./entrypoint_inf.sh /
RUN chmod +x /entrypoint_inf.sh

ENTRYPOINT ["/entrypoint_inf.sh"]

# Default command
CMD ["default"]