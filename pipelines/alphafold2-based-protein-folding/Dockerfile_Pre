ARG FROM_IMAGE=ubuntu:22.04

# Install Base miniconda image
ARG BASE_IMAGE=condaforge/miniforge3:24.3.0-0
FROM ${BASE_IMAGE} as conda_setup

# Non-root user setup
ENV SERVICE_NAME="alphafold2-bpf-service"

RUN groupadd --gid 1001 $SERVICE_NAME && \
    useradd -m -g $SERVICE_NAME --shell /bin/false --uid 1001 $SERVICE_NAME

# Install Anaconda and PIP dependency
RUN conda update -n base conda
RUN conda install python==3.11
RUN conda install -y -c conda-forge mkl==2024.2.0  dpcpp_linux-64==2024.2.0 dpcpp-cpp-rt==2024.2.0 mkl-devel==2024.2.0
RUN conda install -y -c conda-forge openmm==8.1.1 pdbfixer==1.9
RUN conda install -y -c bioconda hmmer=3.3.2  hhsuite==3.3.0 kalign2==2.04
RUN python -m pip install onednn-cpu-iomp==2023.2.0
RUN python -m pip install torch==2.0.1 pybind11==2.11.1
RUN python -m pip install absl-py==2.0.0 biopython==1.81 chex==0.1.84 dm-haiku==0.0.10 dm-tree==0.1.8 immutabledict==3.0.0  ml-collections==0.1.1 numpy==1.26.1 scipy==1.11.3 tensorflow==2.14.0 pandas==2.1.1 psutil==5.9.6 tqdm==4.65.0 joblib==1.3.2 pragzip==0.6.0
RUN python -m pip install jax==0.4.21 jaxlib==0.4.21
RUN python -m pip install intel-extension-for-pytorch==2.0.100 intel-openmp==2024.2.0

FROM ${FROM_IMAGE} as builder
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    git build-essential cmake wget tzdata gcc curl gnupg gnupg2 gnupg1 sudo kalign autoconf numactl time vim tar ca-certificates -y \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get autoremove -y \
    && apt-get clean \
    && apt update


COPY --from=conda_setup /opt/conda /opt/conda
ENV PATH "/opt/conda/bin:$PATH"
RUN echo "source /opt/conda/bin/activate " > ~/.bashrc
CMD source ~/.bashrc

WORKDIR /
RUN git clone --recursive https://github.com/IntelLabs/Open-Omics-Acceleration-Framework.git

ENV ALPHA_FOLD_DIR=/Open-Omics-Acceleration-Framework/applications/alphafold
WORKDIR ${ALPHA_FOLD_DIR}
#WORKDIR /Open-Omics-Acceleration-Framework/applications/alphafold

ENV LD_LIBRARY_PATH "/opt/conda/lib:$LD_LIBRARY_PATH"
ENV PATH "/opt/conda/bin:$PATH"
# Compile HHsuite from source.
#
RUN git clone --recursive https://github.com/IntelLabs/hh-suite.git
WORKDIR ${ALPHA_FOLD_DIR}/hh-suite/build
RUN cmake -DCMAKE_INSTALL_PREFIX=`pwd`/release -DCMAKE_CXX_COMPILER="icpx" -DCMAKE_CXX_FLAGS_RELEASE="-O3 -mavx512bw" .. \
	&& ./release/bin/hhblits -h
#RUN git clone --recursive https://github.com/IntelLabs/hh-suite.git \
#    && cd hh-suite \
#    && mkdir build && cd build \
#    && cmake -DCMAKE_INSTALL_PREFIX=`pwd`/release -DCMAKE_CXX_COMPILER="icpx" -DCMAKE_CXX_FLAGS_RELEASE="-O3 -mavx512bw" .. \
#    && make -j 4 && make install \
#    && ./release/bin/hhblits -h \
#    && cd ../..

WORKDIR ${ALPHA_FOLD_DIR}
#WORKDIR /Open-Omics-Acceleration-Framework/applications/alphafold
# Compile Hmmer from source.
RUN git clone --recursive https://github.com/IntelLabs/hmmer.git
#RUN git clone --recursive https://github.com/IntelLabs/hmmer.git \
#    && cd hmmer \
#    && cp easel_makefile.in easel/Makefile.in \
#    && cd easel && autoconf && ./configure --prefix=`pwd` && cd .. \
#    && autoconf && CC=icx CFLAGS="-O3 -mavx512bw -fPIC" ./configure --prefix=`pwd`/release \
#    && make -j 4 && make install \
#    && ./release/bin/jackhmmer -h \
#    && cd ..

WORKDIR ${ALPHA_FOLD_DIR}/Hmmer
RUN cp easel_makefile.in easel/Makefile.in
WORKDIR ${ALPHA_FOLD_DIR}/Hmmer/easel
RUN autoconf && ./configure --prefix=`pwd`
WORKDIR WORKDIR ${ALPHA_FOLD_DIR}/Hmmer/
RUN autoconf && CC=icx CFLAGS="-O3 -march=native -fPIC" ./configure --prefix=`pwd`/release \
	 && ./release/bin/jackhmmer -h
#WORKDIR /Open-Omics-Acceleration-Framework/applications/alphafold

COPY --from=conda_setup /Open-Omics-Acceleration-Framework /Open-Omics-Acceleration-Framework
WORKDIR ${ALPHA_FOLD_DIR}

# Swith to Non-root user
RUN chown -R $SERVICE_NAME:$SERVICE_NAME $WORKDIR
USER $SERVICE_NAME

HEALTHCHECK NONE

RUN echo "source /opt/conda/bin/activate " > ~/.bashrc
CMD source ~/.bashrc
ENV PATH "/opt/conda/bin:$PATH"
ENV LD_LIBRARY_PATH "/opt/conda/lib:$LD_LIBRARY_PATH"
CMD  source ~/.bashrc && mkdir weights && mkdir weights/extracted && python extract_params.py --input /data/params/params_model_1.npz --output_dir ./weights/extracted/model_1 \
  && python run_multiprocess_pre.py --root_home=/Open-Omics-Acceleration-Framework/applications/alphafold --data_dir=/data --input_dir=/samples --output_dir=/output --model_name=model_1
